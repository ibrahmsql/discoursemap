#!/usr/bin/env python3
"""
HTML Reporter Module

Generates HTML format reports from scan results.
"""

from typing import Dict, List, Optional, Any
from datetime import datetime


class HTMLReporter:
    """Generates HTML format reports"""
    
    def __init__(self, verbose: bool = False):
        self.verbose = verbose
    
    def generate_report(self, scan_results: Dict[str, Any], 
                       target_url: str, 
                       scan_type: str = "comprehensive") -> str:
        """Generate a comprehensive HTML report"""
        
        html_content = self._generate_html_structure(
            scan_results, target_url, scan_type
        )
        
        return html_content
    
    def _generate_html_structure(self, scan_results: Dict[str, Any], 
                                target_url: str, scan_type: str) -> str:
        """Generate the main HTML structure"""
        
        executive_summary = self._generate_executive_summary(scan_results)
        
        html = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DiscourseMap Security Report - {target_url}</title>
    <style>
        {self._get_css_styles()}
    </style>
</head>
<body>
    <div class="container">
        <header class="report-header">
            <h1>DiscourseMap Security Report</h1>
            <div class="report-info">
                <p><strong>Target:</strong> {target_url}</p>
                <p><strong>Scan Type:</strong> {scan_type}</p>
                <p><strong>Generated:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
            </div>
        </header>
        
        <section class="executive-summary">
            <h2>Executive Summary</h2>
            {self._format_executive_summary(executive_summary)}
        </section>
        
        <section class="detailed-findings">
            <h2>Detailed Findings</h2>
            {self._format_detailed_findings(scan_results)}
        </section>
        
        <section class="recommendations">
            <h2>Recommendations</h2>
            {self._format_recommendations(scan_results)}
        </section>
        
        <footer class="report-footer">
            <p>Generated by DiscourseMap Security Scanner</p>
        </footer>
    </div>
</body>
</html>
        """
        
        return html
    
    def _get_css_styles(self) -> str:
        """Get CSS styles for the HTML report"""
        
        return """
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 0;
            background-color: #f5f5f5;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: white;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        
        .report-header {
            border-bottom: 3px solid #2c3e50;
            padding-bottom: 20px;
            margin-bottom: 30px;
        }
        
        .report-header h1 {
            color: #2c3e50;
            margin: 0;
            font-size: 2.5em;
        }
        
        .report-info {
            margin-top: 15px;
            color: #666;
        }
        
        .executive-summary {
            background-color: #ecf0f1;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 30px;
        }
        
        .risk-level {
            display: inline-block;
            padding: 8px 16px;
            border-radius: 4px;
            font-weight: bold;
            text-transform: uppercase;
        }
        
        .risk-critical { background-color: #e74c3c; color: white; }
        .risk-high { background-color: #e67e22; color: white; }
        .risk-medium { background-color: #f39c12; color: white; }
        .risk-low { background-color: #27ae60; color: white; }
        .risk-minimal { background-color: #95a5a6; color: white; }
        
        .vulnerability-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }
        
        .stat-card {
            background: white;
            padding: 15px;
            border-radius: 6px;
            border-left: 4px solid #3498db;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .stat-number {
            font-size: 2em;
            font-weight: bold;
            color: #2c3e50;
        }
        
        .stat-label {
            color: #666;
            text-transform: uppercase;
            font-size: 0.9em;
        }
        
        .module-section {
            margin-bottom: 30px;
            border: 1px solid #ddd;
            border-radius: 6px;
            overflow: hidden;
        }
        
        .module-header {
            background-color: #34495e;
            color: white;
            padding: 15px;
            font-weight: bold;
        }
        
        .module-content {
            padding: 20px;
        }
        
        .vulnerability {
            background-color: #fff5f5;
            border-left: 4px solid #e74c3c;
            padding: 15px;
            margin: 10px 0;
            border-radius: 4px;
        }
        
        .vulnerability.medium {
            background-color: #fffbf0;
            border-left-color: #f39c12;
        }
        
        .vulnerability.low {
            background-color: #f0fff4;
            border-left-color: #27ae60;
        }
        
        .recommendation {
            background-color: #f8f9fa;
            border-left: 4px solid #17a2b8;
            padding: 15px;
            margin: 10px 0;
            border-radius: 4px;
        }
        
        .report-footer {
            text-align: center;
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #ddd;
            color: #666;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 15px 0;
        }
        
        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        
        th {
            background-color: #f8f9fa;
            font-weight: bold;
        }
        """
    
    def _generate_executive_summary(self, scan_results: Dict[str, Any]) -> Dict[str, Any]:
        """Generate executive summary from scan results"""
        
        total_vulnerabilities = 0
        critical_count = 0
        high_count = 0
        medium_count = 0
        low_count = 0
        
        for module_name, module_results in scan_results.items():
            if isinstance(module_results, dict):
                vulnerabilities = module_results.get('vulnerabilities', [])
                if isinstance(vulnerabilities, list):
                    total_vulnerabilities += len(vulnerabilities)
                    
                    for vuln in vulnerabilities:
                        severity = vuln.get('severity', '').upper()
                        if severity == 'CRITICAL':
                            critical_count += 1
                        elif severity == 'HIGH':
                            high_count += 1
                        elif severity == 'MEDIUM':
                            medium_count += 1
                        elif severity == 'LOW':
                            low_count += 1
        
        if critical_count > 0:
            risk_level = 'CRITICAL'
        elif high_count > 0:
            risk_level = 'HIGH'
        elif medium_count > 0:
            risk_level = 'MEDIUM'
        elif low_count > 0:
            risk_level = 'LOW'
        else:
            risk_level = 'MINIMAL'
        
        return {
            'overall_risk_level': risk_level,
            'total_vulnerabilities': total_vulnerabilities,
            'vulnerability_breakdown': {
                'critical': critical_count,
                'high': high_count,
                'medium': medium_count,
                'low': low_count
            }
        }
    
    def _format_executive_summary(self, summary: Dict[str, Any]) -> str:
        """Format executive summary as HTML"""
        
        risk_level = summary['overall_risk_level'].lower()
        
        html = f"""
        <div class="risk-assessment">
            <h3>Overall Risk Level: <span class="risk-level risk-{risk_level}">{summary['overall_risk_level']}</span></h3>
            <p>Total vulnerabilities found: <strong>{summary['total_vulnerabilities']}</strong></p>
        </div>
        
        <div class="vulnerability-stats">
            <div class="stat-card">
                <div class="stat-number">{summary['vulnerability_breakdown']['critical']}</div>
                <div class="stat-label">Critical</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">{summary['vulnerability_breakdown']['high']}</div>
                <div class="stat-label">High</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">{summary['vulnerability_breakdown']['medium']}</div>
                <div class="stat-label">Medium</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">{summary['vulnerability_breakdown']['low']}</div>
                <div class="stat-label">Low</div>
            </div>
        </div>
        """
        
        return html
    
    def _format_detailed_findings(self, scan_results: Dict[str, Any]) -> str:
        """Format detailed findings as HTML"""
        
        html = ""
        
        for module_name, module_results in scan_results.items():
            if isinstance(module_results, dict):
                html += f"""
                <div class="module-section">
                    <div class="module-header">{module_name.replace('_', ' ').title()}</div>
                    <div class="module-content">
                        {self._format_module_results(module_results)}
                    </div>
                </div>
                """
        
        return html
    
    def _format_module_results(self, module_results: Dict[str, Any]) -> str:
        """Format individual module results"""
        
        html = ""
        
        # Format vulnerabilities
        vulnerabilities = module_results.get('vulnerabilities', [])
        if vulnerabilities:
            html += "<h4>Vulnerabilities Found:</h4>"
            
            for vuln in vulnerabilities:
                severity_class = vuln.get('severity', 'low').lower()
                html += f"""
                <div class="vulnerability {severity_class}">
                    <h5>{vuln.get('type', 'Unknown Vulnerability')} 
                        <span class="risk-level risk-{severity_class}">{vuln.get('severity', 'Unknown')}</span>
                    </h5>
                    <p>{vuln.get('description', 'No description available')}</p>
                    {f"<p><strong>Endpoint:</strong> {vuln['endpoint']}</p>" if 'endpoint' in vuln else ""}
                    {f"<p><strong>Payload:</strong> <code>{vuln['payload']}</code></p>" if 'payload' in vuln else ""}
                </div>
                """
        
        # Format other results
        for key, value in module_results.items():
            if key not in ['vulnerabilities', 'recommendations']:
                if isinstance(value, dict):
                    html += f"<h4>{key.replace('_', ' ').title()}:</h4>"
                    html += self._format_dict_as_table(value)
                elif isinstance(value, list) and value:
                    html += f"<h4>{key.replace('_', ' ').title()}:</h4>"
                    html += "<ul>"
                    for item in value:
                        html += f"<li>{item}</li>"
                    html += "</ul>"
        
        return html
    
    def _format_recommendations(self, scan_results: Dict[str, Any]) -> str:
        """Format recommendations as HTML"""
        
        all_recommendations = []
        
        for module_name, module_results in scan_results.items():
            if isinstance(module_results, dict):
                recommendations = module_results.get('recommendations', [])
                
                if isinstance(recommendations, list):
                    for rec in recommendations:
                        if isinstance(rec, dict):
                            rec['source_module'] = module_name
                            all_recommendations.append(rec)
        
        if not all_recommendations:
            return "<p>No specific recommendations generated.</p>"
        
        html = ""
        
        for rec in all_recommendations:
            severity_class = rec.get('severity', 'medium').lower()
            html += f"""
            <div class="recommendation">
                <h4>{rec.get('issue', 'Security Issue')} 
                    <span class="risk-level risk-{severity_class}">{rec.get('severity', 'Medium')}</span>
                </h4>
                <p><strong>Recommendation:</strong> {rec.get('recommendation', 'No recommendation provided')}</p>
                <p><strong>Source Module:</strong> {rec.get('source_module', 'Unknown')}</p>
                {f"<p><strong>Affected:</strong> {', '.join(rec['affected'])}</p>" if 'affected' in rec else ""}
            </div>
            """
        
        return html
    
    def _format_dict_as_table(self, data: Dict[str, Any]) -> str:
        """Format dictionary as HTML table"""
        
        html = "<table>"
        
        for key, value in data.items():
            html += f"""
            <tr>
                <th>{key.replace('_', ' ').title()}</th>
                <td>{self._format_value(value)}</td>
            </tr>
            """
        
        html += "</table>"
        return html
    
    def _format_value(self, value: Any) -> str:
        """Format a value for HTML display"""
        
        if isinstance(value, bool):
            return "Yes" if value else "No"
        elif isinstance(value, list):
            return ", ".join(str(item) for item in value)
        elif isinstance(value, dict):
            return str(value)  # Could be improved with nested formatting
        else:
            return str(value)
    
    def save_report(self, html_content: str, filename: str) -> bool:
        """Save HTML report to file"""
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(html_content)
            
            if self.verbose:
                print(f"HTML report saved to {filename}")
            
            return True
            
        except Exception as e:
            if self.verbose:
                print(f"Error saving HTML report: {e}")
            return False