#!/usr/bin/env python3
"""
Discourse Vulnerability Module (Refactored)

Vulnerability scanning for Discourse forums.
Split from 753 lines into modular components.
"""

from typing import Dict, Any
from colorama import Fore, Style
from .xss_scanner import XSSScanner
from .sqli_scanner import SQLiScanner
from .csrf_scanner import CSRFScanner


class VulnerabilityModule:
    """Vulnerability testing module (Refactored)"""
    
    def __init__(self, scanner):
        """
        Initialize the VulnerabilityModule with a scanner and prepare result storage and scanner components.
        
        Parameters:
            scanner: An object providing a `target_url` that identifies the scan target; passed to and used by the module's scanner components.
        
        Description:
            Creates a `results` dictionary containing empty lists for vulnerability categories (XSS, SQLi, CSRF, XXE, LFI, RCE, information disclosure) and counters (`tests_performed`, `vulnerabilities_found`), and instantiates the XSS, SQLi, and CSRF scanner components using the provided scanner.
        """
        self.scanner = scanner
        self.results = {
            'module_name': 'Vulnerability Testing',
            'target': scanner.target_url,
            'xss_vulns': [],
            'sqli_vulns': [],
            'csrf_vulns': [],
            'xxe_vulns': [],
            'lfi_vulns': [],
            'rce_vulns': [],
            'info_disclosure': [],
            'tests_performed': 0,
            'vulnerabilities_found': 0
        }
        
        # Initialize scanners
        self.xss_scanner = XSSScanner(scanner)
        self.sqli_scanner = SQLiScanner(scanner)
        self.csrf_scanner = CSRFScanner(scanner)
    
    def run(self) -> Dict[str, Any]:
        """
        Run the configured vulnerability scanners and aggregate their findings into the module's results.
        
        The method executes the module's XSS, SQL injection, and CSRF scanners, updates tests performed, computes the total vulnerabilities found, and stores findings in the instance results dictionary.
        
        Returns:
            results (Dict[str, Any]): Aggregated scan results. Expected keys include:
                - module_name (str)
                - target (str)
                - xss_vulns (List[Any])
                - sqli_vulns (List[Any])
                - csrf_vulns (List[Any])
                - xxe_vulns, lfi_vulns, rce_vulns, info_disclosure (List[Any])
                - tests_performed (int)
                - vulnerabilities_found (int)
        """
        print(f"{Fore.CYAN}[*] Starting Vulnerability Scan...{Style.RESET_ALL}")
        
        # XSS scanning
        print(f"{Fore.YELLOW}[*] Scanning for XSS vulnerabilities...{Style.RESET_ALL}")
        self.results['xss_vulns'] = self.xss_scanner.scan_xss()
        self.results['tests_performed'] += 1
        
        # SQL Injection scanning
        print(f"{Fore.YELLOW}[*] Scanning for SQL injection...{Style.RESET_ALL}")
        self.results['sqli_vulns'] = self.sqli_scanner.scan_sqli()
        self.results['tests_performed'] += 1
        
        # CSRF scanning
        print(f"{Fore.YELLOW}[*] Scanning for CSRF vulnerabilities...{Style.RESET_ALL}")
        self.results['csrf_vulns'] = self.csrf_scanner.scan_csrf()
        self.results['tests_performed'] += 1
        
        # Count total vulnerabilities
        self.results['vulnerabilities_found'] = (
            len(self.results['xss_vulns']) +
            len(self.results['sqli_vulns']) +
            len(self.results['csrf_vulns'])
        )
        
        # Print summary
        self._print_summary()
        
        return self.results
    
    def _print_summary(self):
        """
        Prints a colored summary of vulnerability counts from the module's results.
        
        Reads 'xss_vulns', 'sqli_vulns', 'csrf_vulns', and 'vulnerabilities_found' from self.results and prints each category's count. If any vulnerabilities are found, prints counts in red and the total; otherwise prints a green message indicating no critical vulnerabilities were found.
        """
        print(f"\n{Fore.GREEN}[+] Vulnerability scan complete!{Style.RESET_ALL}")
        
        xss_count = len(self.results['xss_vulns'])
        sqli_count = len(self.results['sqli_vulns'])
        csrf_count = len(self.results['csrf_vulns'])
        total = self.results['vulnerabilities_found']
        
        if total > 0:
            print(f"    {Fore.RED}XSS vulnerabilities: {xss_count}{Style.RESET_ALL}")
            print(f"    {Fore.RED}SQLi vulnerabilities: {sqli_count}{Style.RESET_ALL}")
            print(f"    {Fore.RED}CSRF vulnerabilities: {csrf_count}{Style.RESET_ALL}")
            print(f"    {Fore.RED}Total: {total}{Style.RESET_ALL}")
        else:
            print(f"    {Fore.GREEN}No critical vulnerabilities found{Style.RESET_ALL}")